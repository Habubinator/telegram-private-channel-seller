import TelegramBot from "node-telegram-bot-api";
import { PaymentService } from "../services/PaymentService";
import { PrismaClient, PlanType } from "@prisma/client";

export class PaymentHandlers {
    constructor(
        private bot: TelegramBot,
        private paymentService: PaymentService,
        private prisma: PrismaClient
    ) {
        this.setupHandlers();
    }

    private setupHandlers() {
        this.bot.setMyCommands([
            {
                command: "start",
                description: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            },
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–∑–≤–µ–∑–¥—ã)
        this.bot.on("pre_checkout_query", async (query) => {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
                const payment = await this.prisma.payment.findUnique({
                    where: { invoicePayload: query.invoice_payload },
                });

                if (!payment || payment.expiresAt < new Date()) {
                    await this.bot.answerPreCheckoutQuery(query.id, false, {
                        error_message: "–ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    });
                    return;
                }

                await this.bot.answerPreCheckoutQuery(query.id, true);
            } catch (error) {
                console.error("Pre-checkout error:", error);
                await this.bot.answerPreCheckoutQuery(query.id, false, {
                    error_message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞",
                });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏
        this.bot.on("successful_payment", async (msg) => {
            try {
                const payment = msg.successful_payment!;

                await this.paymentService.handleTelegramStarsSuccess(
                    payment.invoice_payload,
                    payment.telegram_payment_charge_id
                );

                await this.bot.sendMessage(
                    msg.chat.id,
                    "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É."
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
                await this.addUserToChannel(msg.from!.id);
            } catch (error) {
                console.error("Payment processing error:", error);
                await this.bot.sendMessage(
                    msg.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                );
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        this.bot.onText(/\/start/, async (msg) => {
            const keyboard = {
                inline_keyboard: [
                    [{ text: "üìÖ –ù–∞ —Å—É—Ç–∫–∏", callback_data: "plan_DAY" }],
                    [{ text: "üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data: "plan_WEEK" }],
                    [{ text: "üìÖ –ù–∞ –º–µ—Å—è—Ü", callback_data: "plan_MONTH" }],
                ],
            };

            await this.bot.sendMessage(
                msg.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:",
                { reply_markup: keyboard }
            );
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥
        this.bot.on("callback_query", async (query) => {
            if (!query.data?.startsWith("back_to_plans")) return;

            const keyboard = {
                inline_keyboard: [
                    [{ text: "üìÖ –ù–∞ —Å—É—Ç–∫–∏", callback_data: "plan_DAY" }],
                    [{ text: "üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data: "plan_WEEK" }],
                    [{ text: "üìÖ –ù–∞ –º–µ—Å—è—Ü", callback_data: "plan_MONTH" }],
                ],
            };

            await this.bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:`, {
                chat_id: query.message!.chat.id,
                message_id: query.message!.message_id,
                reply_markup: keyboard,
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        this.bot.on("callback_query", async (query) => {
            if (!query.data?.startsWith("plan_")) return;

            const planType = query.data.split("_")[1] as PlanType;
            const userId = await this.getOrCreateUser(query.from);

            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: "‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏",
                            callback_data: `pay_stars_${planType}`,
                        },
                    ],
                    [
                        {
                            text: "üíµ –û–ø–ª–∞—Ç–∏—Ç—å USDT",
                            callback_data: `pay_usdt_${planType}`,
                        },
                    ],
                    [{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "back_to_plans" }],
                ],
            };

            await this.bot.editMessageText(
                `–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: ${this.getPlanName(
                    planType
                )}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`,
                {
                    chat_id: query.message!.chat.id,
                    message_id: query.message!.message_id,
                    reply_markup: keyboard,
                }
            );
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        this.bot.on("callback_query", async (query) => {
            if (!query.data?.startsWith("pay_")) return;
            const [, paymentType, planType] = query.data.split("_");
            const userId = await this.getOrCreateUser(query.from);

            try {
                if (paymentType === "stars") {
                    await this.paymentService.createTelegramStarsPayment(
                        userId,
                        query.from.id,
                        planType as PlanType
                    );

                    await this.bot.answerCallbackQuery(query.id, {
                        text: "–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    });
                } else {
                    const { payment, address } =
                        await this.paymentService.createCryptoPayment(
                            userId,
                            planType as PlanType,
                            paymentType.toUpperCase() as "TRX" | "USDT"
                        );

                    const message = `
üí≥ –ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂ ${paymentType.toUpperCase()}

üìã **–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
üí∞ –°—É–º–º–∞: ${payment.amount} ${payment.currency}
üìç –ê–¥—Ä–µ—Å: \`${address}\`
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: \`${payment.id}\`

‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 60 –º–∏–Ω—É—Ç
‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
          `;

                    await this.bot.sendMessage(
                        query.message!.chat.id,
                        message,
                        {
                            parse_mode: "Markdown",
                        }
                    );

                    await this.bot.answerCallbackQuery(query.id, {
                        text: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                    });
                }
            } catch (error) {
                console.error("Payment creation error:", error);
                await this.bot.answerCallbackQuery(query.id, {
                    text: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert: true,
                });
            }
        });
    }

    private async getOrCreateUser(
        telegramUser: TelegramBot.User
    ): Promise<string> {
        let user = await this.prisma.user.findUnique({
            where: { telegramId: BigInt(telegramUser.id) },
        });

        if (!user) {
            user = await this.prisma.user.create({
                data: {
                    telegramId: BigInt(telegramUser.id),
                    username: telegramUser.username,
                    firstName: telegramUser.first_name,
                    lastName: telegramUser.last_name,
                },
            });
        }

        return user.id;
    }

    private async addUserToChannel(telegramId: number) {
        try {
            await this.bot.unbanChatMember(process.env.CHANNEL_ID!, telegramId);
        } catch (error) {
            console.error("Error adding user to channel:", error);
        }
    }

    private getPlanName(planType: PlanType): string {
        const names = {
            [PlanType.DAY]: "—Å—É—Ç–∫–∏",
            [PlanType.WEEK]: "–Ω–µ–¥–µ–ª—é",
            [PlanType.MONTH]: "–º–µ—Å—è—Ü",
        };
        return names[planType];
    }
}
