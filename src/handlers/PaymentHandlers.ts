import TelegramBot from "node-telegram-bot-api";
import { PaymentService } from "../services/PaymentService";
import { PrismaClient, PlanType } from "@prisma/client";

export class PaymentHandlers {
    constructor(
        private bot: TelegramBot,
        private paymentService: PaymentService,
        private prisma: PrismaClient
    ) {
        this.setupHandlers();
    }

    private setupHandlers() {
        this.bot.setMyCommands([
            {
                command: "start",
                description: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            },
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
        this.bot.on("chat_join_request", async (chatJoinRequest) => {
            try {
                const userId = chatJoinRequest.from.id;
                const chatId = chatJoinRequest.chat.id;

                console.log(
                    `Join request from user ${userId} to chat ${chatId}`
                );

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                const user = await this.prisma.user.findUnique({
                    where: { telegramId: BigInt(userId) },
                    include: {
                        subscriptions: {
                            where: {
                                channelId: chatId.toString(),
                                isActive: true,
                                endDate: { gte: new Date() },
                            },
                        },
                    },
                });

                if (user && user.subscriptions.length > 0) {
                    // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –æ–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                    await this.bot.approveChatJoinRequest(chatId, userId);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await this.bot.sendMessage(
                        userId,
                        "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."
                    );

                    console.log(
                        `Approved join request for user ${userId} with active subscription`
                    );
                } else {
                    // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–∫–ª–æ–Ω—è–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
                    await this.bot.declineChatJoinRequest(chatId, userId);

                    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await this.getOrCreateUser(chatJoinRequest.from);

                    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ
                    const keyboard = {
                        inline_keyboard: [
                            [
                                {
                                    text: "üìÖ –ù–∞ —Å—É—Ç–∫–∏",
                                    callback_data: "plan_DAY",
                                },
                            ],
                            [
                                {
                                    text: "üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é",
                                    callback_data: "plan_WEEK",
                                },
                            ],
                            [
                                {
                                    text: "üìÖ –ù–∞ –º–µ—Å—è—Ü",
                                    callback_data: "plan_MONTH",
                                },
                            ],
                        ],
                    };

                    await this.bot.sendMessage(
                        userId,
                        "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
                        { reply_markup: keyboard }
                    );

                    console.log(
                        `Declined join request for user ${userId} - no active subscription`
                    );
                }
            } catch (error) {
                console.error("Error handling chat join request:", error);

                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                try {
                    await this.bot.declineChatJoinRequest(
                        chatJoinRequest.chat.id,
                        chatJoinRequest.from.id
                    );
                } catch (declineError) {
                    console.error(
                        "Error declining join request:",
                        declineError
                    );
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–∑–≤–µ–∑–¥—ã)
        this.bot.on("pre_checkout_query", async (query) => {
            try {
                const payment = await this.prisma.payment.findUnique({
                    where: { invoicePayload: query.invoice_payload },
                });

                if (!payment || payment.expiresAt < new Date()) {
                    await this.bot.answerPreCheckoutQuery(query.id, false, {
                        error_message: "–ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    });
                    return;
                }

                await this.bot.answerPreCheckoutQuery(query.id, true);
            } catch (error) {
                console.error("Pre-checkout error:", error);
                await this.bot.answerPreCheckoutQuery(query.id, false, {
                    error_message: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞",
                });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏
        this.bot.on("successful_payment", async (msg) => {
            try {
                const payment = msg.successful_payment!;

                await this.paymentService.handleTelegramStarsSuccess(
                    payment.invoice_payload,
                    payment.telegram_payment_charge_id
                );

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                const inviteLink = await this.createInviteLink();

                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: "üîó –í–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
                                url: inviteLink,
                            },
                        ],
                    ],
                };

                await this.bot.sendMessage(
                    msg.chat.id,
                    "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.",
                    { reply_markup: keyboard }
                );
            } catch (error) {
                console.error("Payment processing error:", error);
                await this.bot.sendMessage(
                    msg.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                );
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        this.bot.onText(/\/start/, async (msg) => {
            const keyboard = {
                inline_keyboard: [
                    [{ text: "üìÖ –ù–∞ —Å—É—Ç–∫–∏", callback_data: "plan_DAY" }],
                    [{ text: "üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data: "plan_WEEK" }],
                    [{ text: "üìÖ –ù–∞ –º–µ—Å—è—Ü", callback_data: "plan_MONTH" }],
                ],
            };

            await this.bot.sendMessage(
                msg.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:",
                { reply_markup: keyboard }
            );
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥
        this.bot.on("callback_query", async (query) => {
            if (!query.data?.startsWith("back_to_plans")) return;

            const keyboard = {
                inline_keyboard: [
                    [{ text: "üìÖ –ù–∞ —Å—É—Ç–∫–∏", callback_data: "plan_DAY" }],
                    [{ text: "üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data: "plan_WEEK" }],
                    [{ text: "üìÖ –ù–∞ –º–µ—Å—è—Ü", callback_data: "plan_MONTH" }],
                ],
            };

            await this.bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:`, {
                chat_id: query.message!.chat.id,
                message_id: query.message!.message_id,
                reply_markup: keyboard,
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        this.bot.on("callback_query", async (query) => {
            if (!query.data?.startsWith("plan_")) return;

            const planType = query.data.split("_")[1] as PlanType;
            const userId = await this.getOrCreateUser(query.from);

            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: "‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏",
                            callback_data: `pay_stars_${planType}`,
                        },
                    ],
                    [
                        {
                            text: "üíµ –û–ø–ª–∞—Ç–∏—Ç—å USDT",
                            callback_data: `pay_usdt_${planType}`,
                        },
                    ],
                    [{ text: "‚Üê –ù–∞–∑–∞–¥", callback_data: "back_to_plans" }],
                ],
            };

            await this.bot.editMessageText(
                `–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: ${this.getPlanName(
                    planType
                )}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`,
                {
                    chat_id: query.message!.chat.id,
                    message_id: query.message!.message_id,
                    reply_markup: keyboard,
                }
            );
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        this.bot.on("callback_query", async (query) => {
            if (!query.data?.startsWith("pay_")) return;
            const [, paymentType, planType] = query.data.split("_");
            const userId = await this.getOrCreateUser(query.from);

            try {
                if (paymentType === "stars") {
                    await this.paymentService.createTelegramStarsPayment(
                        userId,
                        query.from.id,
                        planType as PlanType
                    );

                    await this.bot.answerCallbackQuery(query.id, {
                        text: "–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    });
                } else {
                    const { payment, address } =
                        await this.paymentService.createCryptoPayment(
                            userId,
                            planType as PlanType,
                            paymentType.toUpperCase() as "TRX" | "USDT"
                        );

                    const message = `
üí≥ –ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂ ${paymentType.toUpperCase()}

üìã **–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
üí∞ –°—É–º–º–∞: ${payment.amount} ${payment.currency}
üìç –ê–¥—Ä–µ—Å: \`${address}\`
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: \`${payment.id}\`

‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 60 –º–∏–Ω—É—Ç
‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
          `;

                    await this.bot.sendMessage(
                        query.message!.chat.id,
                        message,
                        {
                            parse_mode: "Markdown",
                        }
                    );

                    await this.bot.answerCallbackQuery(query.id, {
                        text: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                    });
                }
            } catch (error) {
                console.error("Payment creation error:", error);
                await this.bot.answerCallbackQuery(query.id, {
                    text: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert: true,
                });
            }
        });
    }

    private async getOrCreateUser(
        telegramUser: TelegramBot.User
    ): Promise<string> {
        let user = await this.prisma.user.findUnique({
            where: { telegramId: BigInt(telegramUser.id) },
        });

        if (!user) {
            user = await this.prisma.user.create({
                data: {
                    telegramId: BigInt(telegramUser.id),
                    username: telegramUser.username,
                    firstName: telegramUser.first_name,
                    lastName: telegramUser.last_name,
                },
            });
        }

        return user.id;
    }

    private async createInviteLink(): Promise<string> {
        try {
            // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            const inviteLink = await this.bot.createChatInviteLink(
                process.env.CHANNEL_ID!,
                {
                    name: `Invite_${Date.now()}`,
                    expire_date: Math.floor(Date.now() / 1000) + 60 * 100,
                    member_limit: 1, // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    creates_join_request: false, // –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
                }
            );

            return inviteLink.invite_link;
        } catch (error) {
            console.error("Error creating invite link:", error);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–µ–π
    async handleCryptoPaymentSuccess(userId: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: { id: userId },
            });

            if (!user) {
                console.error(`User not found: ${userId}`);
                return;
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            const inviteLink = await this.createInviteLink();

            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: "üîó –í–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
                            url: inviteLink,
                        },
                    ],
                ],
            };

            await this.bot.sendMessage(
                Number(user.telegramId),
                "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.",
                { reply_markup: keyboard }
            );
        } catch (error) {
            console.error("Error handling crypto payment success:", error);
        }
    }

    private getPlanName(planType: PlanType): string {
        const names = {
            [PlanType.DAY]: "—Å—É—Ç–∫–∏",
            [PlanType.WEEK]: "–Ω–µ–¥–µ–ª—é",
            [PlanType.MONTH]: "–º–µ—Å—è—Ü",
        };
        return names[planType];
    }
}
