import TelegramBot from "node-telegram-bot-api";
import { PrismaClient } from "@prisma/client";
import { PaymentService, CryptoMonitor, NOWPaymentsService } from "./services";
import { PaymentHandlers } from "./handlers";
import cron from "node-cron";
class SubscriptionBot {
    private bot: TelegramBot;
    private prisma: PrismaClient;
    private paymentService: PaymentService;
    private paymentHandlers: PaymentHandlers;
    private cryptoMonitor: CryptoMonitor;

    constructor() {
        this.prisma = new PrismaClient();
        this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, {
            polling: true,
        });

        this.paymentService = new PaymentService(this.prisma, this.bot);

        this.paymentHandlers = new PaymentHandlers(
            this.bot,
            this.paymentService,
            this.prisma
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
        this.paymentService.setPaymentHandlers(this.paymentHandlers);

        this.cryptoMonitor = new CryptoMonitor(
            this.prisma,
            this.paymentService
        );

        this.setupScheduledTasks();
    }

    private setupScheduledTasks() {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        cron.schedule("*/5 * * * *", async () => {
            try {
                await this.paymentService.cleanupExpiredPayments();
                await this.cryptoMonitor.cleanupExpiredPayments();
                console.log("‚úÖ Expired payments cleaned up");
            } catch (error) {
                console.error("‚ùå Error cleaning expired payments:", error);
            }
        });

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        cron.schedule("*/2 * * * *", async () => {
            try {
                await this.cryptoMonitor.checkPendingPayments();
            } catch (error) {
                console.error("‚ùå Error monitoring crypto payments:", error);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
        cron.schedule("0 * * * *", async () => {
            try {
                await this.removeExpiredSubscriptions();
            } catch (error) {
                console.error(
                    "‚ùå Error removing expired subscriptions:",
                    error
                );
            }
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        cron.schedule("0 */6 * * *", async () => {
            try {
                await this.cryptoMonitor.getPaymentStats();
            } catch (error) {
                console.error("‚ùå Error getting payment stats:", error);
            }
        });
    }

    private async removeExpiredSubscriptions() {
        const expiredSubscriptions = await this.prisma.subscription.findMany({
            where: {
                endDate: { lt: new Date() },
                isActive: true,
            },
            include: { user: true },
        });

        let processedCount = 0;

        for (const subscription of expiredSubscriptions) {
            try {
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await this.prisma.subscription.update({
                    where: { id: subscription.id },
                    data: { isActive: false },
                });

                // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
                try {
                    await this.bot.banChatMember(
                        process.env.CHANNEL_ID!,
                        Number(subscription.user.telegramId)
                    );
                } catch (banError) {
                    console.log(
                        `Could not ban user ${subscription.user.telegramId}:`,
                        banError.message
                    );
                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                try {
                    await this.bot.sendMessage(
                        Number(subscription.user.telegramId),
                        "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start"
                    );
                } catch (msgError) {
                    console.log(
                        `Could not send expiry message to user ${subscription.user.telegramId}:`,
                        msgError.message
                    );
                }

                processedCount++;
                console.log(
                    `üîÑ Deactivated expired subscription for user ${subscription.user.telegramId}`
                );

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                await new Promise((resolve) => setTimeout(resolve, 100));
            } catch (error) {
                console.error(
                    `‚ùå Error processing expired subscription for user ${subscription.user.telegramId}:`,
                    error
                );
            }
        }

        if (processedCount > 0) {
            console.log(`üìä Processed ${processedCount} expired subscriptions`);
        }
    }

    async start() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            await this.prisma.$connect();
            console.log("‚úÖ Database connected");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            const botInfo = await this.bot.getMe();
            console.log(`‚úÖ Bot connected: @${botInfo.username}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            this.checkEnvironmentVariables();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º NOWPayments API
            await this.checkNOWPaymentsAPI();

            console.log("üöÄ Subscription bot started successfully!");

            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            setTimeout(async () => {
                try {
                    await this.cryptoMonitor.getPaymentStats();
                } catch (error) {
                    console.error("Error getting initial stats:", error);
                }
            }, 5000);
        } catch (error) {
            console.error("‚ùå Error starting bot:", error);
            process.exit(1);
        }
    }

    private async checkNOWPaymentsAPI() {
        try {
            const nowPayments = new NOWPaymentsService(
                process.env.NOWPAYMENTS_API_KEY!
            );

            const isAvailable = await nowPayments.checkApiStatus();
            if (isAvailable) {
                console.log("‚úÖ NOWPayments API is available");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                try {
                    const currencies =
                        await nowPayments.getAvailableCurrencies();
                    const hasUSDTTRC20 = currencies.includes("usdttrc20");

                    if (hasUSDTTRC20) {
                        console.log("‚úÖ USDT TRC20 is supported");
                    } else {
                        console.warn(
                            "‚ö†Ô∏è USDT TRC20 may not be available, check your NOWPayments account"
                        );
                        console.log(
                            "Available currencies:",
                            currencies.slice(0, 10).join(", "),
                            "..."
                        );
                    }
                } catch (currencyError) {
                    console.warn(
                        "‚ö†Ô∏è Could not check available currencies:",
                        currencyError.message
                    );
                }
            } else {
                throw new Error("NOWPayments API is not available");
            }
        } catch (error) {
            console.error("‚ùå NOWPayments API check failed:", error.message);
            console.warn("‚ö†Ô∏è Bot will start but crypto payments may not work");
        }
    }

    private checkEnvironmentVariables() {
        const requiredVars = [
            "TELEGRAM_BOT_TOKEN",
            "DATABASE_URL",
            "CHANNEL_ID",
            "NOWPAYMENTS_API_KEY",
        ];

        const missingVars = requiredVars.filter(
            (varName) => !process.env[varName]
        );

        if (missingVars.length > 0) {
            console.error(
                "‚ùå Missing required environment variables:",
                missingVars.join(", ")
            );
            process.exit(1);
        }

        console.log("‚úÖ All required environment variables are set");
    }

    async stop() {
        console.log("üõë Shutting down bot...");

        try {
            await this.prisma.$disconnect();
            console.log("‚úÖ Database disconnected");

            await this.bot.stopPolling();
            console.log("‚úÖ Bot polling stopped");
        } catch (error) {
            console.error("‚ùå Error during shutdown:", error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SubscriptionBot();
bot.start();

// Graceful shutdown
process.on("SIGINT", async () => {
    console.log("\nüõë Received SIGINT, shutting down gracefully...");
    await bot.stop();
    process.exit(0);
});

process.on("SIGTERM", async () => {
    console.log("\nüõë Received SIGTERM, shutting down gracefully...");
    await bot.stop();
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on("unhandledRejection", (reason, promise) => {
    console.error("‚ùå Unhandled Rejection at:", promise, "reason:", reason);
});

process.on("uncaughtException", (error) => {
    console.error("‚ùå Uncaught Exception:", error);
    process.exit(1);
});
