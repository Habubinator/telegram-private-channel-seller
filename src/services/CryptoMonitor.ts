import { PrismaClient, PaymentStatus, PaymentType } from "@prisma/client";
import TronWeb from "tronweb";
import { PaymentService } from "./PaymentService";

// TODO - —Ö—É–π–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

export class CryptoMonitor {
    private processedTxs = new Set<string>();

    constructor(
        private prisma: PrismaClient,
        private tronWeb: TronWeb,
        private paymentService: PaymentService
    ) {}

    async checkPendingPayments() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∏
            const pendingPayments = await this.prisma.payment.findMany({
                where: {
                    status: PaymentStatus.PENDING,
                    paymentType: {
                        in: [PaymentType.CRYPTO_TRX, PaymentType.CRYPTO_USDT],
                    },
                    expiresAt: { gte: new Date() },
                },
            });

            for (const payment of pendingPayments) {
                await this.checkPaymentTransactions(payment);
            }
        } catch (error) {
            console.error("Error checking pending payments:", error);
        }
    }

    private async checkPaymentTransactions(payment: any) {
        try {
            if (payment.paymentType === PaymentType.CRYPTO_TRX) {
                await this.checkTRXTransactions(payment);
            } else if (payment.paymentType === PaymentType.CRYPTO_USDT) {
                await this.checkUSDTTransactions(payment);
            }
        } catch (error) {
            console.error(
                `Error checking transactions for payment ${payment.id}:`,
                error
            );
        }
    }

    private async checkTRXTransactions(payment: any) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API
            const response = await this.tronWeb.fullNode.request(
                "v1/accounts/" + payment.cryptoAddress + "/transactions",
                {
                    limit: 20,
                    only_to: true, // –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    order_by: "block_timestamp,desc",
                },
                "get"
            );

            if (!response.data || !Array.isArray(response.data)) {
                return;
            }

            for (const tx of response.data) {
                if (this.processedTxs.has(tx.txID)) continue;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è TRX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π
                if (this.isValidTRXTransaction(tx, payment)) {
                    try {
                        await this.paymentService.handleCryptoPayment(tx.txID);
                        this.processedTxs.add(tx.txID);
                        console.log(`‚úÖ Processed TRX payment: ${tx.txID}`);
                        break; // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    } catch (error) {
                        console.error(
                            `Error processing TRX transaction ${tx.txID}:`,
                            error
                        );
                    }
                }
            }
        } catch (error) {
            console.error("Error checking TRX transactions:", error);
        }
    }

    private async checkUSDTTransactions(payment: any) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è USDT
            const response = await this.tronWeb.fullNode.request(
                "v1/accounts/" + payment.cryptoAddress + "/transactions/trc20",
                {
                    limit: 20,
                    contract_address: "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t", // USDT TRC20
                    only_to: true,
                    order_by: "block_timestamp,desc",
                },
                "get"
            );

            if (!response.data || !Array.isArray(response.data)) {
                return;
            }

            for (const tx of response.data) {
                if (this.processedTxs.has(tx.transaction_id)) continue;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π
                if (this.isValidUSDTTransaction(tx, payment)) {
                    try {
                        await this.paymentService.handleCryptoPayment(
                            tx.transaction_id
                        );
                        this.processedTxs.add(tx.transaction_id);
                        console.log(
                            `‚úÖ Processed USDT payment: ${tx.transaction_id}`
                        );
                        break; // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    } catch (error) {
                        console.error(
                            `Error processing USDT transaction ${tx.transaction_id}:`,
                            error
                        );
                    }
                }
            }
        } catch (error) {
            console.error("Error checking USDT transactions:", error);
        }
    }

    private isValidTRXTransaction(tx: any, payment: any): boolean {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            if (!tx.raw_data?.contract?.[0]) return false;

            const contract = tx.raw_data.contract[0];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            if (contract.type !== "TransferContract") return false;

            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É
            const toAddress = this.tronWeb.address.fromHex(
                contract.parameter.value.to_address
            );
            const amount = contract.parameter.value.amount / 1000000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TRX

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞)
            const txTimestamp = new Date(tx.block_timestamp);
            const paymentCreated = new Date(payment.createdAt);

            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            const isCorrectAddress = toAddress === payment.cryptoAddress;
            const isCorrectAmount =
                Math.abs(amount - parseFloat(payment.expectedAmount)) < 0.01;
            const isAfterPaymentCreated = txTimestamp >= paymentCreated;

            console.log(`TRX Transaction validation:`, {
                txID: tx.txID,
                toAddress,
                expectedAddress: payment.cryptoAddress,
                amount,
                expectedAmount: parseFloat(payment.expectedAmount),
                isCorrectAddress,
                isCorrectAmount,
                isAfterPaymentCreated,
                txTimestamp: txTimestamp.toISOString(),
                paymentCreated: paymentCreated.toISOString(),
            });

            return isCorrectAddress && isCorrectAmount && isAfterPaymentCreated;
        } catch (error) {
            console.error("Error validating TRX transaction:", error);
            return false;
        }
    }

    private isValidUSDTTransaction(tx: any, payment: any): boolean {
        try {
            // –î–ª—è TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–∞—è
            const toAddress = tx.to;
            const fromAddress = tx.from;

            // –°—É–º–º–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (USDT)
            const amount =
                parseFloat(tx.value) / Math.pow(10, tx.token_info.decimals);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const txTimestamp = new Date(tx.block_timestamp);
            const paymentCreated = new Date(payment.createdAt);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const isSuccess = tx.type === "Transfer" && tx.result === "SUCCESS";

            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            const isCorrectAddress = toAddress === payment.cryptoAddress;
            const isCorrectAmount =
                Math.abs(amount - parseFloat(payment.expectedAmount)) < 0.01;
            const isAfterPaymentCreated = txTimestamp >= paymentCreated;

            console.log(`USDT Transaction validation:`, {
                txID: tx.transaction_id,
                toAddress,
                fromAddress,
                expectedAddress: payment.cryptoAddress,
                amount,
                expectedAmount: parseFloat(payment.expectedAmount),
                decimals: tx.token_info.decimals,
                isCorrectAddress,
                isCorrectAmount,
                isAfterPaymentCreated,
                isSuccess,
                txTimestamp: txTimestamp.toISOString(),
                paymentCreated: paymentCreated.toISOString(),
            });

            return (
                isCorrectAddress &&
                isCorrectAmount &&
                isAfterPaymentCreated &&
                isSuccess
            );
        } catch (error) {
            console.error("Error validating USDT transaction:", error);
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
    clearProcessedCache() {
        if (this.processedTxs.size > 1000) {
            this.processedTxs.clear();
            console.log("üßπ Cleared processed transactions cache");
        }
    }
}
