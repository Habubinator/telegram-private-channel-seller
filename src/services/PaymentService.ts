import {
    PrismaClient,
    PlanType,
    PaymentType,
    PaymentStatus,
} from "@prisma/client";
import axios from "axios";
import { randomUUID } from "crypto";
import TelegramBot from "node-telegram-bot-api";
import TronWeb from "tronweb";

export class PaymentService {
    constructor(
        private prisma: PrismaClient,
        private bot: TelegramBot,
        private tronWeb: TronWeb
    ) {}

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ payload –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
    private generateUniquePayload(): string {
        return `payment_${Date.now()}_${randomUUID().slice(0, 8)}`;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥—ã Telegram
    async createTelegramStarsPayment(
        userId: string,
        telegramId: number,
        planType: PlanType
    ) {
        const prices = this.getPlanPrices();
        const price = prices[planType].stars;
        const payload = this.generateUniquePayload();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        const payment = await this.prisma.payment.create({
            data: {
                userId,
                amount: price,
                currency: "XTR", // Telegram Stars
                planType,
                paymentType: PaymentType.TELEGRAM_STARS,
                invoicePayload: payload,
                expiresAt: new Date(Date.now() + 30 * 60 * 1000), // 30 –º–∏–Ω—É—Ç
            },
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await this.bot.sendInvoice(
            telegramId,
            `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${this.getPlanName(planType)}`,
            `–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –Ω–∞ ${this.getPlanName(planType)}`,
            payload,
            "",
            "XTR",
            [{ label: "–ü–æ–¥–ø–∏—Å–∫–∞", amount: price }],
            {
                start_parameter: `payment_${payment.id}`,
            }
        );

        return payment;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
    async createCryptoPayment(
        userId: string,
        planType: PlanType,
        cryptoType: "TRX" | "USDT"
    ) {
        const prices = this.getPlanPrices();
        const amount =
            prices[planType][cryptoType.toLowerCase() as "trx" | "usdt"];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å memo
        const paymentAddress = await this.generatePaymentAddress();

        const payment = await this.prisma.payment.create({
            data: {
                userId,
                amount,
                currency: cryptoType,
                planType,
                paymentType:
                    cryptoType === "TRX"
                        ? PaymentType.CRYPTO_TRX
                        : PaymentType.CRYPTO_USDT,
                cryptoAddress: paymentAddress,
                expectedAmount: amount,
                expiresAt: new Date(Date.now() + 60 * 60 * 1000), // 1 —á–∞—Å
            },
        });

        return { payment, address: paymentAddress };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏
    async handleTelegramStarsSuccess(
        payload: string,
        telegramPaymentChargeId: string
    ) {
        const payment = await this.prisma.payment.findUnique({
            where: { invoicePayload: payload },
            include: { user: true },
        });

        if (!payment || payment.status !== PaymentStatus.PENDING) {
            throw new Error("Payment not found or already processed");
        }

        // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await this.prisma.$transaction(async (tx) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
            await tx.payment.update({
                where: { id: payment.id },
                data: {
                    status: PaymentStatus.COMPLETED,
                    telegramPaymentChargeId,
                },
            });

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await this.createSubscription(tx, payment);
        });

        await this.refundStarPayment(
            `${payment.user.telegramId}`,
            telegramPaymentChargeId
        );

        return payment;
    }

    async refundStarPayment(
        userId: string,
        telegramPaymentChargeId: string
    ): Promise<boolean> {
        try {
            const response = await axios.post(
                `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/refundStarPayment`,
                {
                    user_id: userId,
                    telegram_payment_charge_id: telegramPaymentChargeId,
                }
            );

            if (response.data.ok) {
                console.log("Refund successful:", response.data.result);
                return true;
            } else {
                console.error("Refund failed:", response.data.description);
                return false;
            }
        } catch (error) {
            console.error(
                "Error occurred during refund:",
                error.response?.data || error.message
            );
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
    async handleCryptoPayment(txHash: string) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const txInfo = await this.tronWeb.trx.getTransaction(txHash);

        if (!txInfo || !txInfo.ret || txInfo.ret[0].contractRet !== "SUCCESS") {
            throw new Error("Invalid transaction");
        }

        const toAddress = this.tronWeb.address.fromHex(
            txInfo.raw_data.contract[0].parameter.value.to_address
        );
        const amount =
            txInfo.raw_data.contract[0].parameter.value.amount / 1000000; // TRX

        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
        const payment = await this.prisma.payment.findFirst({
            where: {
                cryptoAddress: toAddress,
                expectedAmount: amount,
                status: PaymentStatus.PENDING,
                paymentType: PaymentType.CRYPTO_TRX,
                expiresAt: { gte: new Date() },
            },
            include: { user: true },
        });

        if (!payment) {
            throw new Error("Payment not found");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        const existingTx = await this.prisma.payment.findUnique({
            where: { cryptoTxHash: txHash },
        });

        if (existingTx) {
            throw new Error("Transaction already processed");
        }

        await this.prisma.$transaction(async (tx) => {
            await tx.payment.update({
                where: { id: payment.id },
                data: {
                    status: PaymentStatus.COMPLETED,
                    cryptoTxHash: txHash,
                },
            });

            await this.createSubscription(tx, payment);
        });

        return payment;
    }

    private async createSubscription(tx: any, payment: any) {
        const duration = this.getPlanDuration(payment.planType);
        const channelId = process.env.CHANNEL_ID!;

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingSubscription = await tx.subscription.findFirst({
            where: {
                userId: payment.userId,
                channelId: channelId,
                isActive: true,
                endDate: { gte: new Date() }, // –ü–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
            },
            orderBy: {
                endDate: "desc", // –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –ø–æ–¥–ø–∏—Å–∫—É
            },
        });

        let startDate: Date;
        let endDate: Date;
        let subscription: any;

        if (existingSubscription) {
            // –ü–†–û–î–õ–ï–ù–ò–ï: –Ω–∞—á–∏–Ω–∞–µ–º —Å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            startDate = existingSubscription.endDate;
            endDate = new Date(startDate.getTime() + duration);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await tx.subscription.update({
                where: { id: existingSubscription.id },
                data: {
                    endDate: endDate,
                    planType: payment.planType, // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–æ–≤—ã–π
                    // paymentId –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
                },
            });

            console.log(
                `üîÑ Subscription extended for user ${
                    payment.userId
                }: ${existingSubscription.endDate.toISOString()} ‚Üí ${endDate.toISOString()}`
            );
        } else {
            // –ù–û–í–ê–Ø –ü–û–î–ü–ò–°–ö–ê: –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            startDate = new Date();
            endDate = new Date(startDate.getTime() + duration);

            subscription = await tx.subscription.create({
                data: {
                    userId: payment.userId,
                    channelId: channelId,
                    planType: payment.planType,
                    startDate,
                    endDate,
                    paymentId: payment.id,
                },
            });

            console.log(
                `‚ú® New subscription created for user ${
                    payment.userId
                }: ${startDate.toISOString()} ‚Üí ${endDate.toISOString()}`
            );
        }

        return subscription;
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    async cleanupExpiredPayments() {
        await this.prisma.payment.updateMany({
            where: {
                status: PaymentStatus.PENDING,
                expiresAt: { lt: new Date() },
            },
            data: {
                status: PaymentStatus.EXPIRED,
            },
        });
    }

    private getPlanPrices() {
        // const prices = {
        //     [PlanType.DAY]: { stars: 399, trx: 10, usdt: 10 },
        //     [PlanType.WEEK]: { stars: 599, trx: 60, usdt: 19 },
        //     [PlanType.MONTH]: { stars: 2500, trx: 200, usdt: 50 },
        // };
        const prices = {
            [PlanType.DAY]: { stars: 1, trx: 10, usdt: 0.1 },
            [PlanType.WEEK]: { stars: 1, trx: 60, usdt: 0.1 },
            [PlanType.MONTH]: { stars: 1, trx: 200, usdt: 0.1 },
        };
        // TODO - test data
        return prices;
    }

    private getPlanDuration(planType: PlanType): number {
        // const durations = {
        //     [PlanType.DAY]: 24 * 60 * 60 * 1000,
        //     [PlanType.WEEK]: 7 * 24 * 60 * 60 * 1000,
        //     [PlanType.MONTH]: 30 * 24 * 60 * 60 * 1000,
        // };
        // TODO - test data
        const durations = {
            [PlanType.DAY]: 5 * 1000,
            [PlanType.WEEK]: 10 * 1000,
            [PlanType.MONTH]: 15 * 1000,
        };
        return durations[planType];
    }

    private getPlanName(planType: PlanType): string {
        const names = {
            [PlanType.DAY]: "—Å—É—Ç–∫–∏",
            [PlanType.WEEK]: "–Ω–µ–¥–µ–ª—é",
            [PlanType.MONTH]: "–º–µ—Å—è—Ü",
        };
        return names[planType];
    }

    private generatePaymentAddress(): string {
        return process.env.CRYPTO_WALLET_ADDRESS!;
    }
}
